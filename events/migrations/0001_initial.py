# Generated by Django 5.2.6 on 2025-10-16 10:09

import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('membres', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='EventCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Nom')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('color', models.CharField(default='#4A90E2', max_length=7, verbose_name='Couleur')),
                ('icon', models.CharField(blank=True, max_length=50, null=True, verbose_name='Icone')),
                ('is_active', models.BooleanField(default=True, verbose_name='Actif')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': "Catégorie d'événement",
                'verbose_name_plural': "Catégories d'événements",
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('title', models.CharField(max_length=200, verbose_name='Titre')),
                ('slug', models.SlugField(blank=True, max_length=200, unique=True)),
                ('description', models.TextField(verbose_name="Description Complete de l'événement")),
                ('short_description', models.CharField(blank=True, max_length=300, null=True, verbose_name='Description Courte')),
                ('cover_image', models.ImageField(blank=True, help_text='Taille recommandée: 1200x600px', null=True, upload_to='evenements/images/%Y/%m/%d/', verbose_name='Image de couverture')),
                ('thumbnail', models.ImageField(blank=True, null=True, upload_to='evenements/thumbnails/%Y/%m/%d/', verbose_name='Miniature')),
                ('start_date', models.DateField(verbose_name='Date de début')),
                ('start_time', models.TimeField(verbose_name='Heure de début')),
                ('end_date', models.DateField(verbose_name='Date de fin')),
                ('end_time', models.TimeField(verbose_name='Heure de fin')),
                ('location', models.CharField(blank=True, max_length=255, null=True, verbose_name='Lieu')),
                ('adress', models.CharField(blank=True, max_length=255, null=True, verbose_name='Adresse complete')),
                ('status', models.CharField(choices=[('draft', 'Brouillon'), ('scheduled', 'Programmé'), ('published', 'Publié'), ('ongoing', 'En cours'), ('archived', 'Archivé'), ('canceled', 'Annulé')], default='draft', max_length=20, verbose_name='Statut')),
                ('watsapp_notifications_sent', models.BooleanField(default=False, verbose_name='Notifications Watsapp envoyées')),
                ('watsapp_sent_at', models.DateTimeField(blank=True, null=True, verbose_name="Date d'envoi des notifications Watsapp")),
                ('created_at', models.DateTimeField(auto_now=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_events', to=settings.AUTH_USER_MODEL, verbose_name='Créé par')),
                ('organizer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='organized_events', to=settings.AUTH_USER_MODEL, verbose_name='Organisateur')),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='events', to='events.eventcategory', verbose_name='Catégorie')),
            ],
            options={
                'verbose_name': 'Evenement',
                'verbose_name_plural': 'Evenements',
                'ordering': ['-start_date', '-start_time'],
            },
        ),
        migrations.CreateModel(
            name='EventHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.CharField(choices=[('created', 'Créé'), ('updated', 'Modifié'), ('published', 'Publié'), ('scheduled', 'Programmé'), ('cancelled', 'Annulé'), ('completed', 'Terminé'), ('notification_sent', 'Notification envoyée')], max_length=50, verbose_name='Action')),
                ('description', models.TextField(verbose_name='Description')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='history', to='events.event', verbose_name='Événement')),
                ('performed_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Effectué par')),
            ],
            options={
                'verbose_name': 'Historique',
                'verbose_name_plural': 'Historiques',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='EventProgram',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, verbose_name='Titre du programme')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('date', models.DateField(verbose_name='Date')),
                ('start_time', models.TimeField(verbose_name='Heure de début')),
                ('end_time', models.TimeField(verbose_name='Heure de fin')),
                ('location', models.CharField(blank=True, max_length=200, verbose_name='Lieu spécifique')),
                ('order', models.IntegerField(default=0, verbose_name="ordre d'affichage")),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='programs', to='events.event', verbose_name='Événement')),
            ],
            options={
                'verbose_name': "Programme d'événement",
                'verbose_name_plural': "Programmes d'événements",
                'ordering': ['date', 'start_time', 'order'],
            },
        ),
        migrations.CreateModel(
            name='EventSubProgram',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, verbose_name="Titre de l'activité")),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('start_time', models.TimeField(verbose_name='Heure de début')),
                ('end_time', models.TimeField(verbose_name='Heure de fin')),
                ('speaker', models.CharField(blank=True, max_length=100, null=True, verbose_name='Intervenant/Responsable')),
                ('location', models.CharField(blank=True, max_length=200, null=True, verbose_name='Lieu')),
                ('order', models.IntegerField(default=0, verbose_name="ordre d'affichage")),
                ('program', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sub_programs', to='events.eventprogram', verbose_name='programme parent')),
            ],
            options={
                'verbose_name': 'Sous-programme',
                'verbose_name_plural': 'Sous-programmes',
                'ordering': ['start_time', 'order'],
            },
        ),
        migrations.CreateModel(
            name='WhatsAppNotification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('recipient_type', models.CharField(choices=[('all', 'Tous les membres'), ('group', 'Groupe spécifique'), ('individual', 'Membres individuels')], max_length=20, verbose_name='Type de destinataires')),
                ('message', models.TextField(verbose_name='Message')),
                ('status', models.CharField(choices=[('pending', 'En attente'), ('sending', "En cours d'envoi"), ('sent', 'Envoyé'), ('failed', 'Échoué')], default='pending', max_length=20, verbose_name='Statut')),
                ('total_recipients', models.IntegerField(default=0, verbose_name='Nombre de destinataires')),
                ('successful_sends', models.IntegerField(default=0, verbose_name='Envois réussis')),
                ('failed_sends', models.IntegerField(default=0, verbose_name='Envois échoués')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('sent_at', models.DateTimeField(blank=True, null=True)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='whatsapp_notifications', to='events.event', verbose_name='Événement')),
                ('groups', models.ManyToManyField(blank=True, to='membres.group', verbose_name='Groupes')),
                ('individual_members', models.ManyToManyField(blank=True, to='membres.member', verbose_name='Membres individuels')),
                ('sent_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sent_whatsapp_notifications', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Notification WhatsApp',
                'verbose_name_plural': 'Notifications WhatsApp',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='EventAttendance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('is_present', models.BooleanField(default=False, verbose_name='Présent')),
                ('check_in_time', models.DateTimeField(blank=True, null=True, verbose_name="Heure d'arrivée")),
                ('recorded_at', models.DateTimeField(auto_now_add=True)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attendances', to='events.event', verbose_name='Événement')),
                ('member', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='event_attendances', to='membres.member', verbose_name='Membre')),
                ('recorded_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Enregistré par')),
            ],
            options={
                'verbose_name': 'Présence',
                'verbose_name_plural': 'Présences',
                'ordering': ['-check_in_time'],
                'unique_together': {('event', 'member')},
            },
        ),
        migrations.AddIndex(
            model_name='event',
            index=models.Index(fields=['start_date', 'start_time'], name='events_even_start_d_764756_idx'),
        ),
        migrations.AddIndex(
            model_name='event',
            index=models.Index(fields=['slug'], name='events_even_slug_30eb0f_idx'),
        ),
    ]
